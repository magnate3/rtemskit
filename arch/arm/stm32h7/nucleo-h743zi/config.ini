[arm/nucleo-h743zi]
# Selects the compiler used to build the BSP (allowed values are "gcc" and
# "clang").  Please note that the values of some options depend on the compiler
# selection and changing the compiler may lead to unpredictable behaviour if
# these options are not adjusted as well.  Use the --rtems-compiler command line
# option to get the default values for a particular compiler via
# ./waf bsp_defaults.
COMPILER = gcc
# Flags passed to the library archiver
ARFLAGS = crD
# Warning flags passed to the C and C++ compiler
WARNING_FLAGS = -Wall
# Warning flags passed to the C compiler
CC_WARNING_FLAGS = -Wmissing-prototypes -Wimplicit-function-declaration -Wstrict-prototypes -Wnested-externs
# Warning flags passed to the C++ compiler
CXX_WARNING_FLAGS = 
# Enable the Ada support
__RTEMS_ADA__ = False
# Defines the build label returned by rtems_get_build_label().
RTEMS_BUILD_LABEL = DEFAULT
# Enable the RTEMS internal debug support
RTEMS_DEBUG = False
# Enable the Driver Manager startup
RTEMS_DRVMGR_STARTUP = False
# Enable the Newlib C library support
RTEMS_NEWLIB = True
# Enable the para-virtualization support
RTEMS_PARAVIRT = False
# Enable support for POSIX signals
RTEMS_POSIX_API = True
# Enable the SMP lock profiling support
RTEMS_PROFILING = False
# Build the Ada test programs (may be also enabled by BUILD_TESTS)
BUILD_ADATESTS = False
# Build the test programs
BUILD_TESTS = False
# Build the benchmark programs (may be also enabled by BUILD_TESTS)
BUILD_BENCHMARKS = False
# Build the file system test programs (may be also enabled by
# BUILD_TESTS)
BUILD_FSTESTS = False
# Build the library test programs (may be also enabled by BUILD_TESTS)
BUILD_LIBTESTS = False
# Build the MPCI test programs (may be also enabled by BUILD_TESTS)
BUILD_MPTESTS = False
# Build the POSIX test programs (may be also enabled by BUILD_TESTS)
BUILD_PSXTESTS = False
# Build the POSIX timing test programs (may be also enabled by
# BUILD_TESTS)
BUILD_PSXTMTESTS = False
# Build the Rhealstone benchmark programs (may be also enabled by
# BUILD_TESTS)
BUILD_RHEALSTONE = False
# Build the sample programs (may be also enabled by BUILD_TESTS)
BUILD_SAMPLES = True
# Build the SMP test programs (may be also enabled by BUILD_TESTS)
BUILD_SMPTESTS = False
# Build the single-processor test programs (may be also enabled by
# BUILD_TESTS)
BUILD_SPTESTS = False
# Build the timing test programs (may be also enabled by BUILD_TESTS)
BUILD_TMTESTS = False
# Build the validation test programs (may be also enabled by
# BUILD_TESTS)
BUILD_VALIDATIONTESTS = False
# Sets the test verbosity of the RTEMS Test Framework.  Valid values
# are "Verbose", "Normal", and "Quiet".  For normal test runs you can
# use a verbosity of "Normal".  If you need a more detailed output,
# then you can set it to "Verbose".  For example, in case a regression
# occurred.  Reducing the verbosity level can significantly reduce the
# test duration especially on targets with a slow serial output
# device.  All verbosity levels produce enough output to notice failed
# test cases.  In particular, the begin and end of test information is
# not affected by the verbosity level.
RTEMS_TEST_VERBOSITY = Normal
# Optimization flags passed to the C and C++ compiler
OPTIMIZATION_FLAGS = -Og -g -fdata-sections -ffunction-sections
# ABI flags
ABI_FLAGS = -mthumb -mcpu=cortex-m7 -mfpu=fpv5-d16 -mfloat-abi=hard
# Enable the alignment of the size of the combined start and text
# sections and the rodata section to meet MPU region alignment
# requirements.  This increases the memory footprint.  It enables a
# write-protection of the start, text, and rodata sections.  It makes
# the data sections non-executable.
STM32H7_ENABLE_MPU_ALIGNMENT = True
# Enable UART4 device in console driver.
STM32H7_CONSOLE_ENABLE_UART4 = True
# Enable UART5 device in console driver.
STM32H7_CONSOLE_ENABLE_UART5 = True
# Enable UART7 device in console driver.
STM32H7_CONSOLE_ENABLE_UART7 = True
# Enable UART8 device in console driver.
STM32H7_CONSOLE_ENABLE_UART8 = True
# Enable UART9 device in console driver.
STM32H7_CONSOLE_ENABLE_UART9 = True
# Enable USART10 device in console driver.
STM32H7_CONSOLE_ENABLE_USART10 = True
# Enable USART1 device in console driver.
STM32H7_CONSOLE_ENABLE_USART1 = True
# Enable USART2 device in console driver.
STM32H7_CONSOLE_ENABLE_USART2 = True
# Enable USART3 device in console driver.
STM32H7_CONSOLE_ENABLE_USART3 = True
# Enable USART6 device in console driver.
STM32H7_CONSOLE_ENABLE_USART6 = True
# Frequency of the external high speed oscillator (HSE).
STM32H7_HSE_FREQUENCY = 8000000
# The default linker command file.  Must be either linkcmds.flash or
# linkcmds.sdram.
STM32H7_DEFAULT_LINKCMDS = linkcmds.flash2
# Size of the Data Tightly Coupled Memory (DTCM) in bytes.
STM32H7_MEMORY_DTCM_SIZE = 0x00020000
# Size of the internal flash in bytes.
STM32H7_MEMORY_FLASH_SIZE = 0x00200000
# Size of the Instruction Tightly Coupled Memory (ITCM) in bytes.  The
# size must take the NULL pointer protection memory area into account
# (STM32H7_MEMORY_NULL_SIZE).
STM32H7_MEMORY_ITCM_SIZE = 0x0000ff00
# Size of the NAND flash in bytes.
STM32H7_MEMORY_NAND_SIZE = 0x00000000
# Size of the NOR flash or PSRAM in bytes.
STM32H7_MEMORY_NOR_SIZE = 0x00000000
# Size of the NULL pointer protection area in bytes.  This memory area
# reduces the size of the ITCM available to the application
# (STM32H7_MEMORY_ITCM_SIZE).
STM32H7_MEMORY_NULL_SIZE = 0x00000100
# Size of the peripheral memory in bytes.
STM32H7_MEMORY_PERIPHERAL_SIZE = 0x20000000
# Size of the QUADSPI memory in bytes.
STM32H7_MEMORY_QUADSPI_SIZE = 0x00000000
# Size of the SDRAM 1 in bytes.
STM32H7_MEMORY_SDRAM_1_SIZE = 0x02000000
# Size of the SDRAM 2 in bytes.
STM32H7_MEMORY_SDRAM_2_SIZE = 0x00000000
# Size of the SRAM 1 (D2 domain) in bytes.
STM32H7_MEMORY_SRAM_1_SIZE = 0x00048000
# Size of the SRAM 2 (D2 domain) in bytes.
STM32H7_MEMORY_SRAM_2_SIZE = 0 #0x00020000
# Size of the SRAM 3 (D2 domain) in bytes.
STM32H7_MEMORY_SRAM_3_SIZE = 0 #0x00008000
# Size of the SRAM 4 (D3 domain) in bytes.
STM32H7_MEMORY_SRAM_4_SIZE = 0x00010000
# Size of the AXI SRAM (D1 domain) in bytes.
STM32H7_MEMORY_SRAM_AXI_SIZE = 0x00080000
# Size of backup SRAM in bytes.
STM32H7_MEMORY_SRAM_BACKUP_SIZE = 0x00001000
# UART/USART instance used for printk() and getchark().
STM32H7_PRINTK_INSTANCE = stm32h7_usart3_instance
# GPIO pins used for the USART3 pin configuration.
STM32H7_USART3_GPIO_PINS = ( GPIO_PIN_8 | GPIO_PIN_9 )
# GPIO registers used for the USART3 pin configuration.
STM32H7_USART3_GPIO_REGS = GPIOD
# Select the STM32H7 series chip variant out of STM32H742xx,
# STM32H743xx, STM32H745xx, STM32H747xx, STM32H750xx, STM32H753xx,
# STM32H755xx, STM32H757xx, STM32H7A3xx, STM32H7A3xxQ, STM32H7B0xx,
# STM32H7B0xxQ, STM32H7B3xx, and STM32H7B3xxQ.
STM32H7_VARIANT = STM32H743xx
# Default baud for console and other serial devices.
BSP_CONSOLE_BAUD = 115200
# Use the Termios interrupt mode in the console driver.
BSP_CONSOLE_USE_INTERRUPTS = True
# If defined to a non-zero value, prints the some information in case
# of a fatal error.
BSP_VERBOSE_FATAL_EXTENSION = 1
# Flags passed to the linker (GNU ld)
LDFLAGS = -Wl,--gc-sections
# Install the legacy application Makefile framework.
INSTALL_LEGACY_MAKEFILES = True
# If defined to a non-zero value, prints the exception context when an
# unexpected exception occurs.
BSP_PRINT_EXCEPTION_CONTEXT = 1
# If defined to a non-zero value, reset the board when the application
# exits.
BSP_RESET_BOARD_AT_EXIT = 1
# If defined to a non-zero value, print a message and wait until
# pressed before resetting board when application exits.
BSP_PRESS_KEY_FOR_RESET = 0
